geom_col(fill="#5D3FD3")+
scale_y_continuous(labels = scales::label_number(scale = 1e-9, suffix = "B")) +
scale_x_discrete(guide = guide_axis(angle = 45)) +
labs(title = "Artists with the most streamed songs of 2023", subtitle = "The Weekend's Blinding Lights takes the top spot with over 3 billion streams.", caption = "Source: Spotify via Kaggle \n by Hannah Marszalek")+
theme_linedraw()+
theme(axis.title = element_blank())
spotify_bar_chart_data %>% ggplot(aes(x = reorder(artist.s._name,desc(streams)), y = streams)) +
geom_col(fill="#5D3FD3")+
scale_y_continuous(labels = scales::label_number(scale = 1e-9, suffix = "B")) +
scale_x_discrete(guide = guide_axis(angle = 45)) +
labs(title = "Artists with the most streamed songs of 2023", subtitle = "The Weekend's Blinding Lights takes the top spot with over 3 billion streams.", caption = "Source: Spotify via Kaggle \n by Hannah Marszalek")+
theme_classic()+
theme(axis.title = element_blank())
spotify_bar_chart_data %>% ggplot(aes(x = reorder(track_name,desc(streams)), y = streams)) +
geom_col(fill="darkgreen")+
scale_y_continuous(labels = scales::label_number(scale = 1e-9, suffix = "B")) +
scale_x_discrete(guide = guide_axis(angle = 45)) +
labs(title = "Top Spotify Tracks of 2023", subtitle = "The Weekend's Blinding Lights takes the top spot with over 3 billion streams.", caption = "Source: Spotify via Kaggle \n by Adam Marton")+
theme_minimal()+
theme(axis.title = element_blank())
spotify_bar_chart_data %>% ggplot(aes(x = reorder(artist.s._name,desc(streams)), y = streams)) +
geom_col(fill="#5D3FD3")+
scale_y_continuous(labels = scales::label_number(scale = 1e-9, suffix = "B")) +
scale_x_discrete(guide = guide_axis(angle = 45)) +
labs(title = "Artists with the most streamed songs of 2023", subtitle = "The Weeknd and Ed Sheeran dominated Spotify's 2023 streams, with their songs both reaching over 3 billion streams.", caption = "Source: Spotify via Kaggle \n by Hannah Marszalek")+
theme_classic()+
theme(axis.title = element_blank())
spotify_bar_chart_data %>% ggplot(aes(x = reorder(artist.s._name,desc(streams)), y = streams)) +
geom_col(fill="#5D3FD3")+
scale_y_continuous(labels = scales::label_number(scale = 1e-9, suffix = "B")) +
scale_x_discrete(guide = guide_axis(angle = 45)) +
labs(title = "Artists with the most streamed songs of 2023", subtitle = "The Weeknd and Ed Sheeran dominated Spotify's 2023 streams, with both artists reaching over 3 billion.", caption = "Source: Spotify via Kaggle \n by Hannah Marszalek")+
theme_classic()+
theme(axis.title = element_blank())
spotify_bar_chart_data %>% ggplot(aes(x = reorder(artist.s._name,desc(streams)), y = streams)) +
geom_col(fill="#5D3FD3")+
scale_y_continuous(labels = scales::label_number(scale = 1e-9, suffix = "B")) +
scale_x_discrete(guide = guide_axis(angle = 45)) +
labs(title = "Artists with the most streamed songs of 2023", subtitle = "The Weeknd and Ed Sheeran dominated Spotify's 2023 streams, with both artists reaching over \n3 billion.", caption = "Source: Spotify via Kaggle \n by Hannah Marszalek")+
theme_classic()+
theme(axis.title = element_blank())
spotify_bar_chart_data %>% ggplot(aes(x = reorder(artist.s._name,desc(streams)), y = streams)) +
geom_col(fill="#5D3FD3")+
scale_y_continuous(labels = scales::label_number(scale = 1e-9, suffix = "B")) +
scale_x_discrete(guide = guide_axis(angle = 45)) +
labs(title = "Artists with the most streamed songs of 2023", subtitle = "The Weeknd and Ed Sheeran dominated Spotify's 2023 streams, with their respective songs\n \"Blinding Lights\" and \"Shape of You\" both reaching over 3 billion streams.", caption = "Source: Spotify via Kaggle \n by Hannah Marszalek")+
theme_classic()+
theme(axis.title = element_blank())
View(spotify_data)
ggplot(spotify_data, aes(bpm, in_spotify_playlists, color = key)) +
geom_point(alpha = .5, aes(size = speechiness_.))+
theme_minimal() +
scale_color_brewer(palette="Paired") +
labs(title = "Are energy and danceability related?", subtitle = "Examining the top Spotify songs of 2023", caption = "Source: Spotify via Kaggle \n by Adam Marton", x = "Danceability", y = "Energy", size = "Speechiness", color = "Key")
ggplot(spotify_data, aes(streams, in_spotify_playlists, color = mode)) +
geom_point(alpha = .5, aes(size = speechiness_.))+
theme_minimal() +
scale_color_brewer(palette="Paired") +
labs(title = "Are energy and danceability related?", subtitle = "Examining the top Spotify songs of 2023", caption = "Source: Spotify via Kaggle \n by Adam Marton", x = "Danceability", y = "Energy", size = "Speechiness", color = "Key")
ggplot(spotify_data, aes(in_spotify_playlists, streams, color = mode)) +
geom_point(alpha = .5, aes(size = bpm))+
theme_minimal() +
scale_color_brewer(palette="Paired") +
labs(title = "Are energy and danceability related?", subtitle = "Examining the top Spotify songs of 2023", caption = "Source: Spotify via Kaggle \n by Adam Marton", x = "Danceability", y = "Energy", size = "Speechiness", color = "Key")
ggplot(spotify_data, aes(in_spotify_playlists, streams, color = mode)) +
geom_point(alpha = .5, aes(size = bpm))+
scale_y_continuous(labels = scales::label_number(scale = 1e-9, suffix = "B"))+
theme_minimal() +
scale_color_brewer(palette="Paired") +
labs(title = "Are energy and danceability related?", subtitle = "Examining the top Spotify songs of 2023", caption = "Source: Spotify via Kaggle \n by Adam Marton", x = "Danceability", y = "Energy", size = "Speechiness", color = "Key")
ggplot(spotify_data, aes(in_spotify_charts, in_spotify_playlists, color = mode)) +
geom_point(alpha = .5, aes(size = streams))+
scale_y_continuous(labels = scales::label_number(scale = 1e-9, suffix = "B"))+
theme_minimal() +
scale_color_brewer(palette="Paired") +
labs(title = "Are energy and danceability related?", subtitle = "Examining the top Spotify songs of 2023", caption = "Source: Spotify via Kaggle \n by Adam Marton", x = "Danceability", y = "Energy", size = "Speechiness", color = "Key")
ggplot(spotify_data, aes(in_spotify_charts, in_spotify_playlists, color = mode)) +
geom_point(alpha = .5, aes(size = streams))+
theme_minimal() +
scale_color_brewer(palette="Paired") +
labs(title = "Are energy and danceability related?", subtitle = "Examining the top Spotify songs of 2023", caption = "Source: Spotify via Kaggle \n by Adam Marton", x = "Danceability", y = "Energy", size = "Speechiness", color = "Key")
ggplot(spotify_data, aes(in_spotify_playlists, streams, color = mode)) +
geom_point(alpha = .5, aes(size = streams))+
theme_minimal() +
scale_color_brewer(palette="Paired") +
labs(title = "Are energy and danceability related?", subtitle = "Examining the top Spotify songs of 2023", caption = "Source: Spotify via Kaggle \n by Adam Marton", x = "Danceability", y = "Energy", size = "Speechiness", color = "Key")
ggplot(spotify_data, aes(in_spotify_playlists, streams, color = mode)) +
geom_point(alpha = .5, aes(size = streams))+
scale_y_continuous(labels = scales::label_number(scale = 1e-9, suffix = "B")) +
theme_minimal() +
scale_color_brewer(palette="Paired") +
labs(title = "Are energy and danceability related?", subtitle = "Examining the top Spotify songs of 2023", caption = "Source: Spotify via Kaggle \n by Adam Marton", x = "Danceability", y = "Energy", size = "Speechiness", color = "Key")
ggplot(spotify_data, aes(in_spotify_playlists, streams, color = mode)) +
geom_point(alpha = .5, aes(size = bpm))+
scale_y_continuous(labels = scales::label_number(scale = 1e-9, suffix = "B")) +
theme_minimal() +
scale_color_brewer(palette="Paired") +
labs(title = "Are energy and danceability related?", subtitle = "Examining the top Spotify songs of 2023", caption = "Source: Spotify via Kaggle \n by Adam Marton", x = "Danceability", y = "Energy", size = "Speechiness", color = "Key")
ggplot(spotify_data, aes(in_spotify_playlists, streams, color = mode)) +
geom_point(alpha = .5, aes(size = bpm))+
scale_y_continuous(labels = scales::label_number(scale = 1e-9, suffix = "B")) +
theme_minimal() +
scale_color_brewer(palette="Paired") +
labs(title = "Are energy and danceability related?", subtitle = "Examining the top Spotify songs of 2023", caption = "Source: Spotify via Kaggle \n by Adam Marton", x = "Number of Spotify Playlist Appearances", y = "Number of Streams", size = "BPM", color = "Mode")
ggplot(spotify_data, aes(in_spotify_playlists, streams, color = mode)) +
geom_point(alpha = .5, aes(size = bpm))+
scale_y_continuous(labels = scales::label_number(scale = 1e-9, suffix = "B")) +
theme_minimal() +
scale_color_brewer(palette="BuGn") +
labs(title = "Are energy and danceability related?", subtitle = "Examining the top Spotify songs of 2023", caption = "Source: Spotify via Kaggle \n by Adam Marton", x = "Number of Spotify Playlist Appearances", y = "Number of Streams", size = "BPM", color = "Mode")
ggplot(spotify_data, aes(in_spotify_playlists, streams, color = mode)) +
geom_point(alpha = .5, aes(size = bpm))+
scale_y_continuous(labels = scales::label_number(scale = 1e-9, suffix = "B")) +
theme_minimal() +
scale_color_brewer(palette="PiYG") +
labs(title = "Are energy and danceability related?", subtitle = "Examining the top Spotify songs of 2023", caption = "Source: Spotify via Kaggle \n by Adam Marton", x = "Number of Spotify Playlist Appearances", y = "Number of Streams", size = "BPM", color = "Mode")
ggplot(spotify_data, aes(in_spotify_playlists, streams, color = mode)) +
geom_point(alpha = .5, aes(size = bpm))+
scale_y_continuous(labels = scales::label_number(scale = 1e-9, suffix = "B")) +
theme_minimal() +
scale_color_brewer(palette="Accent") +
labs(title = "Are energy and danceability related?", subtitle = "Examining the top Spotify songs of 2023", caption = "Source: Spotify via Kaggle \n by Adam Marton", x = "Number of Spotify Playlist Appearances", y = "Number of Streams", size = "BPM", color = "Mode")
ggplot(spotify_data, aes(in_spotify_playlists, streams, color = mode)) +
geom_point(alpha = .5, aes(size = bpm))+
scale_y_continuous(labels = scales::label_number(scale = 1e-9, suffix = "B")) +
theme_minimal() +
scale_color_brewer(palette="Dark2") +
labs(title = "Are energy and danceability related?", subtitle = "Examining the top Spotify songs of 2023", caption = "Source: Spotify via Kaggle \n by Adam Marton", x = "Number of Spotify Playlist Appearances", y = "Number of Streams", size = "BPM", color = "Mode")
ggplot(spotify_data, aes(in_spotify_playlists, streams, color = mode)) +
geom_point(alpha = .5, aes(size = bpm))+
scale_y_continuous(labels = scales::label_number(scale = 1e-9, suffix = "B")) +
theme_minimal() +
scale_color_brewer(palette="Set2") +
labs(title = "Are energy and danceability related?", subtitle = "Examining the top Spotify songs of 2023", caption = "Source: Spotify via Kaggle \n by Adam Marton", x = "Number of Spotify Playlist Appearances", y = "Number of Streams", size = "BPM", color = "Mode")
ggplot(spotify_data, aes(in_spotify_playlists, streams, color = mode)) +
geom_point(alpha = .5, aes(size = bpm))+
scale_y_continuous(labels = scales::label_number(scale = 1e-9, suffix = "B")) +
theme_minimal() +
scale_color_brewer(palette="Pastel1") +
labs(title = "Are energy and danceability related?", subtitle = "Examining the top Spotify songs of 2023", caption = "Source: Spotify via Kaggle \n by Adam Marton", x = "Number of Spotify Playlist Appearances", y = "Number of Streams", size = "BPM", color = "Mode")
ggplot(spotify_data, aes(in_spotify_playlists, streams, color = mode)) +
geom_point(alpha = .5, aes(size = bpm))+
scale_y_continuous(labels = scales::label_number(scale = 1e-9, suffix = "B")) +
theme_minimal() +
scale_color_brewer(palette="Pastel2") +
labs(title = "Are energy and danceability related?", subtitle = "Examining the top Spotify songs of 2023", caption = "Source: Spotify via Kaggle \n by Adam Marton", x = "Number of Spotify Playlist Appearances", y = "Number of Streams", size = "BPM", color = "Mode")
ggplot(spotify_data, aes(in_spotify_playlists, streams, color = mode)) +
geom_point(alpha = .5, aes(size = bpm))+
scale_y_continuous(labels = scales::label_number(scale = 1e-9, suffix = "B")) +
theme_minimal() +
scale_color_brewer(palette="Pastel1") +
labs(title = "Are energy and danceability related?", subtitle = "Examining the top Spotify songs of 2023", caption = "Source: Spotify via Kaggle \n by Adam Marton", x = "Number of Spotify Playlist Appearances", y = "Number of Streams", size = "BPM", color = "Mode")
spotify_scatterplot_data <- spotify_data %>% top_n(200, streams)
View(spotify_scatterplot_data)
spotify_scatterplot_data <- spotify_data %>% top_n(200, streams)
ggplot(spotify_scatterplot_data, aes(in_spotify_playlists, streams, color = mode)) +
geom_point(alpha = .5, aes(size = bpm))+
scale_y_continuous(labels = scales::label_number(scale = 1e-9, suffix = "B")) +
theme_minimal() +
scale_color_brewer(palette="Pastel1") +
labs(title = "How many playlists do the most streamed songs appear in?", subtitle = "Examining the top Spotify songs of 2023", caption = "Source: Spotify via Kaggle \n by Adam Marton", x = "Number of Spotify Playlist Appearances", y = "Number of Streams", size = "BPM", color = "Mode")
spotify_scatterplot_data <- spotify_data %>% top_n(200, streams)
ggplot(spotify_scatterplot_data, aes(in_spotify_playlists, streams, color = mode)) +
geom_point(alpha = .5)+
scale_y_continuous(labels = scales::label_number(scale = 1e-9, suffix = "B")) +
theme_minimal() +
scale_color_brewer(palette="Pastel1") +
labs(title = "How many playlists do the most streamed songs appear in?", subtitle = "Examining the top Spotify songs of 2023", caption = "Source: Spotify via Kaggle \n by Adam Marton", x = "Number of Spotify Playlist Appearances", y = "Number of Streams", size = "BPM", color = "Mode")
spotify_scatterplot_data <- spotify_data %>% top_n(200, streams)
ggplot(spotify_scatterplot_data, aes(in_spotify_playlists, streams, color = mode)) +
geom_point(alpha = 1)+
scale_y_continuous(labels = scales::label_number(scale = 1e-9, suffix = "B")) +
theme_minimal() +
scale_color_brewer(palette="Pastel1") +
labs(title = "How many playlists do the most streamed songs appear in?", subtitle = "Examining the top Spotify songs of 2023", caption = "Source: Spotify via Kaggle \n by Adam Marton", x = "Number of Spotify Playlist Appearances", y = "Number of Streams", size = "BPM", color = "Mode")
spotify_scatterplot_data <- spotify_data %>% top_n(200, streams)
ggplot(spotify_scatterplot_data, aes(in_spotify_playlists, streams, color = mode)) +
geom_point(alpha = .5, aes(size = bpm))+
scale_y_continuous(labels = scales::label_number(scale = 1e-9, suffix = "B")) +
theme_minimal() +
scale_color_brewer(palette="Pastel1") +
labs(title = "How many playlists do the most streamed songs appear in?", subtitle = "Examining the top Spotify songs of 2023", caption = "Source: Spotify via Kaggle \n by Adam Marton", x = "Number of Spotify Playlist Appearances", y = "Number of Streams", size = "BPM", color = "Mode")
spotify_scatterplot_data <- spotify_data %>% top_n(200, streams)
ggplot(spotify_scatterplot_data, aes(in_spotify_playlists, streams, color = mode)) +
geom_point(alpha = .5, aes(size = bpm))+
scale_y_continuous(labels = scales::label_number(scale = 1e-9, suffix = "B")) +
theme_minimal() +
scale_color_brewer(palette="Pastel1") +
labs(title = "How many playlists do the most streamed songs appear in?", subtitle = "This chart looks at the 200 most streamed songs on Spotify for 2023", caption = "Source: Spotify via Kaggle \n by Hannah Marszalek", x = "Number of Spotify Playlist Appearances", y = "Number of Streams", size = "BPM", color = "Mode")
spotify_scatterplot_data <- spotify_data %>% top_n(200, streams)
ggplot(spotify_scatterplot_data, aes(in_spotify_playlists, streams, color = mode)) +
geom_point(alpha = .5, aes(size = bpm))+
scale_y_continuous(labels = scales::label_number(scale = 1e-9, suffix = "B")) +
theme_minimal() +
scale_color_brewer(palette="Pastel1") +
labs(title = "How many playlists do the most streamed songs appear in?", subtitle = "This chart shows the 200 most streamed songs on Spotify for 2023 and how many playlists each song has been added to by Spotify users.", caption = "Source: Spotify via Kaggle \n by Hannah Marszalek", x = "Number of Spotify Playlist Appearances", y = "Number of Streams", size = "BPM", color = "Mode")
spotify_scatterplot_data <- spotify_data %>% top_n(200, streams)
ggplot(spotify_scatterplot_data, aes(in_spotify_playlists, streams, color = mode)) +
geom_point(alpha = .5, aes(size = bpm))+
scale_y_continuous(labels = scales::label_number(scale = 1e-9, suffix = "B")) +
theme_minimal() +
scale_color_brewer(palette="Pastel1") +
labs(title = "How many playlists do the most streamed songs appear in?", subtitle = "This chart shows the 200 most streamed songs on Spotify for 2023 and how many playlists each\nsong has been added to by Spotify users.", caption = "Source: Spotify via Kaggle \n by Hannah Marszalek", x = "Number of Spotify Playlist Appearances", y = "Number of Streams", size = "BPM", color = "Mode")
ggplot(spotify_area_data, aes(x=released_year, y=count_by_year)) +
geom_area(alpha = 0.5, fill="darkgreen") +
labs(title = "Most of Spotify's most popular songs of 2023 were recently released", subtitle = "Though songs go back as far as 1930", caption = "Source: Spotify via Kaggle \n by Adam Marton", x = "Year", y = "Count") +
theme_minimal()
line_chart_data %>% ggplot(aes(x = year, y = prop, color = name)) +
geom_line() +
scale_y_continuous(labels = scales::percent) +
scale_x_continuous(breaks = seq(1900,2017,10)) +
theme_minimal() +
theme(axis.title = element_blank()) +
labs(title = "My awesome chart title", subtitle = "Names as a percentage of all births", color = "Baby name")
spotify_data %>% ggplot(aes(x = release_year, y = artist_count, color = artist_count)) +
geom_line() +
scale_y_continuous(labels = scales::percent) +
scale_x_continuous(breaks = seq(1930,2023,10)) +
theme_minimal() +
theme(axis.title = element_blank()) +
labs(title = "My awesome chart title", subtitle = "Names as a percentage of all births", color = "Baby name")
spotify_data %>% ggplot(aes(x = released_year, y = artist_count, color = artist_count)) +
geom_line() +
scale_y_continuous(labels = scales::percent) +
scale_x_continuous(breaks = seq(1930,2023,10)) +
theme_minimal() +
theme(axis.title = element_blank()) +
labs(title = "My awesome chart title", subtitle = "Names as a percentage of all births", color = "Baby name")
spotify_data %>% ggplot(aes(x = released_year, y = artist_count, color = artist_count)) +
geom_line() +
scale_x_continuous(breaks = seq(1930,2023,10)) +
theme_minimal() +
theme(axis.title = element_blank()) +
labs(title = "My awesome chart title", subtitle = "Names as a percentage of all births", color = "Baby name")
facet_names %>% ggplot(aes(x = year, y = prop, color = name)) +
geom_line() +
scale_y_continuous(labels = scales::percent) +
scale_x_continuous(breaks = seq(1900,2017,40)) +
theme_minimal() +
theme(legend.position = "none") +
facet_wrap(vars(name), ncol = 5)
second_spotify_tree <- spotify_data %>%
group_by(released_year) %>%
summarize(count_by_year = n())
View(second_spotify_tree)
second_spotify_tree <- spotify_data %>%
group_by(released_year) %>%
summarize(count_by_year = n())
ggplot(second_spotify_tree, aes(area = count_by_year, fill = released_year, label = count_by_year)) +
geom_treemap() +
theme_minimal() +
labs(title = "Top Spotify songs by key", subtitle = "Examining the top Spotify songs of 2023", caption = "Source: Spotify via Kaggle \n by Adam Marton", color = "Key")+
geom_treemap_text(colour = "white",
place = "centre",
size = 15)+
scale_fill_brewer(palette = "Paired")
second_spotify_tree <- spotify_data %>%
group_by(released_year) %>%
summarize(count_by_year = n())
ggplot(second_spotify_tree, aes(area = count_by_year, fill = released_year, label = count_by_year)) +
geom_treemap() +
theme_minimal() +
labs(title = "Top Spotify songs by key", subtitle = "Examining the top Spotify songs of 2023", caption = "Source: Spotify via Kaggle \n by Adam Marton", color = "Key")+
geom_treemap_text(colour = "white",
place = "centre",
size = 15)+
scale_fill_brewer(palette = "Paired")
ggplot(second_spotify_tree, aes(area = count_by_year, fill = released_year, label = count_by_year)) +
geom_treemap()
ggplot(second_spotify_tree, aes(area = count_by_year, fill = released_year, label = count_by_year)) +
geom_treemap() +
theme_minimal()
ggplot(second_spotify_tree, aes(area = count_by_year, fill = released_year, label = count_by_year)) +
geom_treemap() +
theme_minimal() +
labs(title = "Top Spotify songs by key", subtitle = "Examining the top Spotify songs of 2023", caption = "Source: Spotify via Kaggle \n by Adam Marton", color = "Key")
second_spotify_tree <- spotify_data %>%
group_by(released_year) %>%
summarize(count_by_year = n())
ggplot(second_spotify_tree, aes(area = count_by_year, fill = released_year, label = count_by_year)) +
geom_treemap() +
theme_minimal() +
labs(title = "Top Spotify songs by key", subtitle = "Examining the top Spotify songs of 2023", caption = "Source: Spotify via Kaggle \n by Adam Marton", color = "Release Year")+
geom_treemap_text(colour = "white",
place = "centre",
size = 15)+
scale_fill_brewer(palette = "Spectral")
ggplot(second_spotify_tree, aes(area = count_by_year, fill = released_year, label = count_by_year)) +
geom_treemap() +
theme_minimal() +
labs(title = "Top Spotify songs by key", subtitle = "Examining the top Spotify songs of 2023", caption = "Source: Spotify via Kaggle \n by Adam Marton", color = "Release Year")+
geom_treemap_text(colour = "white",
place = "centre",
size = 15)
ggplot(second_spotify_tree, aes(area = count_by_year, fill = released_year, label = count_by_year)) +
geom_treemap() +
theme_minimal() +
labs(title = "Top Spotify songs by key", subtitle = "Examining the top Spotify songs of 2023", caption = "Source: Spotify via Kaggle \n by Adam Marton", color = "Release Year")+
geom_treemap_text(colour = "white",
place = "centre",
size = 15)
second_spotify_tree <- spotify_data %>%
group_by(released_year) %>%
summarize(count_by_year = n())
ggplot(second_spotify_tree, aes(area = count_by_year, fill = released_year, label = count_by_year)) +
geom_treemap() +
theme_minimal() +
labs(title = "Top Spotify songs by key", subtitle = "Examining the top Spotify songs of 2023", caption = "Source: Spotify via Kaggle \n by Adam Marton", color = "Release Year") +
geom_treemap_text(colour = "white",
place = "centre",
size = 15)
second_spotify_tree <- spotify_data %>%
group_by(released_year) %>%
summarize(count_by_year = n())
ggplot(second_spotify_tree, aes(area = count_by_year, fill = released_year, label = count_by_year)) +
geom_treemap() +
theme_minimal() +
labs(title = "Top Spotify songs by key", subtitle = "Examining the top Spotify songs of 2023", caption = "Source: Spotify via Kaggle \n by Adam Marton", fill = "Release Year") +
geom_treemap_text(colour = "white",
place = "centre",
size = 15)
second_spotify_tree <- spotify_data %>%
group_by(released_year) %>%
summarize(count_by_year = n())
ggplot(second_spotify_tree, aes(area = count_by_year, fill = released_year, label = count_by_year)) +
geom_treemap() +
theme_minimal() +
labs(title = "Top Spotify songs by year", subtitle = "This treemap shows how many of the top streamed songs from 2023 were released in recent years.", caption = "Source: Spotify via Kaggle \n by Hannah Marszalek", fill = "Release Year") +
geom_treemap_text(colour = "white",
place = "centre",
size = 15)
second_spotify_tree <- spotify_data %>%
group_by(released_year) %>%
summarize(count_by_year = n())
ggplot(second_spotify_tree, aes(area = count_by_year, fill = released_year, label = count_by_year)) +
geom_treemap() +
theme_minimal() +
labs(title = "Top Spotify streams by release year", subtitle = "This treemap shows how many of the top streamed songs from 2023 were released in recent years.", caption = "Source: Spotify via Kaggle \n by Hannah Marszalek", fill = "Release Year") +
geom_treemap_text(colour = "white",
place = "centre",
size = 15)
second_spotify_tree <- spotify_data %>%
group_by(released_year) %>%
summarize(count_by_year = n())
ggplot(second_spotify_tree, aes(area = count_by_year, fill = released_year, label = count_by_year)) +
geom_treemap() +
theme_minimal() +
labs(title = "Most of Spotify's top streamed songs of 2023 released in recent years", subtitle = "This treemap shows how many of the top streamed songs from 2023 were released in recent years.", caption = "Source: Spotify via Kaggle \n by Hannah Marszalek", fill = "Release Year") +
geom_treemap_text(colour = "white",
place = "centre",
size = 15)
second_spotify_tree <- spotify_data %>%
group_by(released_year) %>%
summarize(count_by_year = n())
ggplot(second_spotify_tree, aes(area = count_by_year, fill = released_year, label = count_by_year)) +
geom_treemap() +
theme_minimal() +
labs(title = "Most of Spotify's top streamed songs of 2023 released in recent years", subtitle = "This treemap shows the release years for all of the top streamed songs of 2023. While years go back as far as 1930, the majority of the top songs were released in the past ten years.", caption = "Source: Spotify via Kaggle \n by Hannah Marszalek", fill = "Release Year") +
geom_treemap_text(colour = "white",
place = "centre",
size = 15)
second_spotify_tree <- spotify_data %>%
group_by(released_year) %>%
summarize(count_by_year = n())
ggplot(second_spotify_tree, aes(area = count_by_year, fill = released_year, label = count_by_year)) +
geom_treemap() +
theme_minimal() +
labs(title = "Most of Spotify's top streamed songs of 2023 released in recent years", subtitle = "This treemap shows the release years for all of the top streamed songs of 2023. While\nyears go back as far as 1930, the majority of the top songs were released in the past ten years.", caption = "Source: Spotify via Kaggle \n by Hannah Marszalek", fill = "Release Year") +
geom_treemap_text(colour = "white",
place = "centre",
size = 15)
second_spotify_tree <- spotify_data %>%
group_by(released_year) %>%
summarize(count_by_year = n())
ggplot(second_spotify_tree, aes(area = count_by_year, fill = released_year, label = count_by_year)) +
geom_treemap() +
theme_minimal() +
labs(title = "Most of Spotify's top streamed songs of 2023 released in recent years", subtitle = "This treemap shows the release years for all of the top streamed songs of 2023.\nWhile years go back as far as 1930, the majority of the top songs were released in the past ten years.", caption = "Source: Spotify via Kaggle \n by Hannah Marszalek", fill = "Release Year") +
geom_treemap_text(colour = "white",
place = "centre",
size = 15)
second_spotify_tree <- spotify_data %>%
group_by(released_year) %>%
summarize(count_by_year = n())
ggplot(second_spotify_tree, aes(area = count_by_year, fill = released_year, label = count_by_year)) +
geom_treemap() +
theme_minimal() +
labs(title = "Most of Spotify's top streamed songs of 2023 released in recent years", subtitle = "This treemap shows the release years for all of the top streamed songs of 2023. While\nyears go back as far as 1930, the majority of the top songs were released in the past ten years.", caption = "Source: Spotify via Kaggle \n by Hannah Marszalek", fill = "Release Year") +
geom_treemap_text(colour = "white",
place = "centre",
size = 15)
second_spotify_tree <- spotify_data %>%
group_by(released_year) %>%
summarize(count_by_year = n())
ggplot(second_spotify_tree, aes(area = count_by_year, fill = released_year, label = count_by_year)) +
geom_treemap() +
theme_minimal() +
labs(title = "Most of Spotify's top streamed songs of 2023 released in recent years", subtitle = "This treemap shows the release years for all of the top streamed songs of 2023. While\nyears go back as far as 1930, the majority of the top songs were released in the past\nten years.", caption = "Source: Spotify via Kaggle \n by Hannah Marszalek", fill = "Release Year") +
geom_treemap_text(colour = "white",
place = "centre",
size = 15)
second_spotify_tree <- spotify_data %>%
group_by(released_year) %>%
summarize(count_by_year = n())
ggplot(second_spotify_tree, aes(area = count_by_year, fill = released_year, label = count_by_year)) +
geom_treemap() +
theme_minimal() +
labs(title = "Most of Spotify's top streamed songs of 2023 released in recent years", subtitle = "This treemap shows the release years for all of the top streamed songs of 2023. While\nyears go back as far as 1930, the majority of the top songs were released in the past\n10 years.", caption = "Source: Spotify via Kaggle \n by Hannah Marszalek", fill = "Release Year") +
geom_treemap_text(colour = "white",
place = "centre",
size = 15)
second_spotify_tree <- spotify_data %>%
group_by(released_year) %>%
summarize(count_by_year = n())
ggplot(second_spotify_tree, aes(area = count_by_year, fill = released_year, label = count_by_year)) +
geom_treemap() +
theme_minimal() +
labs(title = "Most of Spotify's top streamed songs of 2023 were recent releases", subtitle = "This treemap shows the release years for all of the top streamed songs of 2023. While\nyears go back as far as 1930, the majority of the top songs were released in the past\n10 years.", caption = "Source: Spotify via Kaggle \n by Hannah Marszalek", fill = "Release Year") +
geom_treemap_text(colour = "white",
place = "centre",
size = 15)
install.packages("treemapify")
install.packages("RColorBrewer")
install.packages('svglite')
install.packages("svglite")
install.packages("treemapify")
spotify_bar_chart_data %>% ggplot(aes(x = reorder(artist.s._name,desc(streams)), y = streams)) +
geom_col(fill="#5D3FD3")+
scale_y_continuous(labels = scales::label_number(scale = 1e-9, suffix = "B")) +
scale_x_discrete(guide = guide_axis(angle = 45)) +
labs(title = "Artists with the most streamed songs of 2023", subtitle = "The Weeknd and Ed Sheeran dominated Spotify's 2023 streams, with their respective songs\n \"Blinding Lights\" and \"Shape of You\" both reaching over 3 billion streams.", caption = "Source: Spotify via Kaggle \n by Hannah Marszalek")+
theme_classic()+
theme(axis.title = element_blank())
spotify_scatterplot_data <- spotify_data %>% top_n(200, streams)
ggplot(spotify_scatterplot_data, aes(in_spotify_playlists, streams, color = mode)) +
geom_point(alpha = .5, aes(size = bpm))+
scale_y_continuous(labels = scales::label_number(scale = 1e-9, suffix = "B")) +
theme_minimal() +
scale_color_brewer(palette="Pastel1") +
labs(title = "How many playlists do the most streamed songs appear in?", subtitle = "This chart shows the 200 most streamed songs on Spotify for 2023 and how many playlists each\nsong has been added to by Spotify users.", caption = "Source: Spotify via Kaggle \n by Hannah Marszalek", x = "Number of Spotify Playlist Appearances", y = "Number of Streams", size = "BPM", color = "Mode")
spotify_scatterplot_data <- spotify_data %>% top_n(200, streams)
ggplot(spotify_scatterplot_data, aes(in_spotify_playlists, streams, color = mode)) +
geom_point(alpha = .5, aes(size = bpm))+
scale_y_continuous(labels = scales::label_number(scale = 1e-9, suffix = "B")) +
theme_minimal() +
scale_color_brewer(palette="Pastel1") +
labs(title = "How many playlists do the most streamed songs appear in?", subtitle = "This chart shows the 200 most streamed songs on Spotify for 2023 and how many playlists each\nsong has been added to by Spotify users. It also shows the BPM of the songs and whether they are major or minor", caption = "Source: Spotify via Kaggle \n by Hannah Marszalek", x = "Number of Spotify Playlist Appearances", y = "Number of Streams", size = "BPM", color = "Mode")
spotify_scatterplot_data <- spotify_data %>% top_n(200, streams)
ggplot(spotify_scatterplot_data, aes(in_spotify_playlists, streams, color = mode)) +
geom_point(alpha = .5, aes(size = bpm))+
scale_y_continuous(labels = scales::label_number(scale = 1e-9, suffix = "B")) +
theme_minimal() +
scale_color_brewer(palette="Pastel1") +
labs(title = "How many playlists do the most streamed songs appear in?", subtitle = "This chart shows the 200 most streamed songs on Spotify for 2023 and how many playlists each\nsong has been added to by Spotify users. It also shows the BPM of the songs and whether they\nare major or minor.", caption = "Source: Spotify via Kaggle \n by Hannah Marszalek", x = "Number of Spotify Playlist Appearances", y = "Number of Streams", size = "BPM", color = "Mode")
second_spotify_tree <- spotify_data %>%
group_by(released_year) %>%
summarize(count_by_year = n())
ggplot(second_spotify_tree, aes(area = count_by_year, fill = released_year, label = count_by_year)) +
geom_treemap() +
theme_classic() +
labs(title = "Most of Spotify's top streamed songs of 2023 were recent releases", subtitle = "This treemap shows the release years for all of the top streamed songs of 2023. While\nyears go back as far as 1930, the majority of the top songs were released in the past\n10 years.", caption = "Source: Spotify via Kaggle \n by Hannah Marszalek", fill = "Release Year") +
geom_treemap_text(colour = "white",
place = "centre",
size = 15)
second_spotify_tree <- spotify_data %>%
group_by(released_year) %>%
summarize(count_by_year = n())
ggplot(second_spotify_tree, aes(area = count_by_year, fill = released_year, label = count_by_year)) +
geom_treemap() +
theme_minimal() +
labs(title = "Most of Spotify's top streamed songs of 2023 were recent releases", subtitle = "This treemap shows the release years for all of the top streamed songs of 2023. While\nyears go back as far as 1930, the majority of the top songs were released in the past\n10 years.", caption = "Source: Spotify via Kaggle \n by Hannah Marszalek", fill = "Release Year") +
geom_treemap_text(colour = "white",
place = "centre",
size = 15)
spotify_scatterplot_data <- spotify_data %>% top_n(200, streams)
ggplot(spotify_scatterplot_data, aes(in_spotify_playlists, streams, color = mode)) +
geom_point(alpha = .5, aes(size = bpm))+
scale_y_continuous(labels = scales::label_number(scale = 1e-9, suffix = "B")) +
theme_classic() +
scale_color_brewer(palette="Pastel1") +
labs(title = "How many playlists do the most streamed songs appear in?", subtitle = "This chart shows the 200 most streamed songs on Spotify for 2023 and how many playlists each\nsong has been added to by Spotify users. It also shows the BPM of the songs and whether they\nare major or minor.", caption = "Source: Spotify via Kaggle \n by Hannah Marszalek", x = "Number of Spotify Playlist Appearances", y = "Number of Streams", size = "BPM", color = "Mode")
spotify_scatterplot_data <- spotify_data %>% top_n(200, streams)
ggplot(spotify_scatterplot_data, aes(in_spotify_playlists, streams, color = mode)) +
geom_point(alpha = .5, aes(size = bpm))+
scale_y_continuous(labels = scales::label_number(scale = 1e-9, suffix = "B")) +
theme_bw() +
scale_color_brewer(palette="Pastel1") +
labs(title = "How many playlists do the most streamed songs appear in?", subtitle = "This chart shows the 200 most streamed songs on Spotify for 2023 and how many playlists each\nsong has been added to by Spotify users. It also shows the BPM of the songs and whether they\nare major or minor.", caption = "Source: Spotify via Kaggle \n by Hannah Marszalek", x = "Number of Spotify Playlist Appearances", y = "Number of Streams", size = "BPM", color = "Mode")
second_spotify_tree <- spotify_data %>%
group_by(released_year) %>%
summarize(count_by_year = n())
ggplot(second_spotify_tree, aes(area = count_by_year, fill = released_year, label = count_by_year)) +
geom_treemap() +
theme_minimal() +
labs(title = "Most of Spotify's top streamed songs of 2023 were recent releases", subtitle = "This treemap shows the release years for all of the top streamed songs of 2023. While\nyears go back as far as 1930, the majority of the top songs were released in the past\n10 years.", caption = "Source: Spotify via Kaggle \n by Hannah Marszalek", fill = "Release Year") +
geom_treemap_text(colour = "white",
place = "centre",
size = 15)
spotify_scatterplot_data <- spotify_data %>% top_n(200, streams)
ggplot(spotify_scatterplot_data, aes(in_spotify_playlists, streams, color = mode)) +
geom_point(alpha = .5, aes(size = bpm))+
scale_y_continuous(labels = scales::label_number(scale = 1e-9, suffix = "B")) +
theme_bw() +
scale_color_brewer(palette="Pastel1") +
labs(title = "How many playlists do the most streamed songs appear in?", subtitle = "This chart shows the 200 most streamed songs on Spotify for 2023 and how many playlists each\nsong has been added to by Spotify users. It also shows the BPM of the songs and whether they\nare major or minor.", caption = "Source: Spotify via Kaggle \n by Hannah Marszalek", x = "Number of Spotify Playlist Appearances", y = "Number of Streams", size = "BPM", color = "Mode")
spotify_bar_chart_data %>% ggplot(aes(x = reorder(artist.s._name,desc(streams)), y = streams)) +
geom_col(fill="#5D3FD3")+
scale_y_continuous(labels = scales::label_number(scale = 1e-9, suffix = "B")) +
scale_x_discrete(guide = guide_axis(angle = 45)) +
labs(title = "Artists with the most streamed songs of 2023", subtitle = "The Weeknd and Ed Sheeran dominated Spotify's 2023 streams, with their respective songs\n \"Blinding Lights\" and \"Shape of You\" both reaching over 3 billion streams.", caption = "Source: Spotify via Kaggle \n by Hannah Marszalek")+
theme_classic()+
theme(axis.title = element_blank())
